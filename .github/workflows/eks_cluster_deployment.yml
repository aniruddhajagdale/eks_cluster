name: EKS Cluster Deployment

on:
  push:
    branches:
      - main
      - dev
  
jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.6.6"

        # Set the working directory based on the branch/environment
      - name: Set Working Directory
        id : set-dir
        run: echo "WORKING_DIR=./environment/${{ github.ref_name == 'main' && 'prod' || 'dev' }}" >> $GITHUB_ENV

        # Authenticate using AWS Credentials
      - name: Configure AWS Credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.TF_VAR_region }}
          
      - name: Verify identity
        run: aws sts get-caller-identity

      # Set Environment-Specific Variables (from GitHub Secrets or Environments)
      - name: Set Terraform Variables
        run: |
          echo 'TF_VAR_env=${{ vars.TF_VAR_env }}' >> $GITHUB_ENV
          echo 'TF_VAR_cidr_block=${{ vars.TF_VAR_cidr_block }}' >> $GITHUB_ENV
          echo 'TF_VAR_private_subnets_cidr=${{ toJSON(vars.TF_VAR_private_subnets_cidr) }}' >> $GITHUB_ENV
          echo 'TF_VAR_public_subnets_cidr=${{ toJSON(vars.TF_VAR_public_subnets_cidr) }}' >> $GITHUB_ENV
          echo 'TF_VAR_availability_zones=${{ toJSON(vars.TF_VAR_availability_zones) }}' >> $GITHUB_ENV
          echo 'TF_VAR_cluster_name=${{ vars.TF_VAR_cluster_name }}' >> $GITHUB_ENV
          echo 'TF_VAR_cluster_version=${{ vars.TF_VAR_cluster_version }}' >> $GITHUB_ENV
          echo 'TF_VAR_max_size=${{ vars.TF_VAR_max_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_min_size=${{ vars.TF_VAR_min_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_desired_size=${{ vars.TF_VAR_desired_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_instance_types=${{ toJSON(vars.TF_VAR_instance_types) }}' >> $GITHUB_ENV
          echo 'TF_VAR_region=${{ vars.TF_VAR_region }}' >> $GITHUB_ENV

      # Run Terraform commands using the dynamic directory set above
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.WORKING_DIR}}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Apply
        if: github.ref_name == 'dev' || (github.ref_name == 'main' && github.event_name == 'push')
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}